plugins {
    id 'io.freefair.lombok' version '8.6'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

archivesBaseName = 'delta-uhc'
version  = "${date()}.${branch()}(${hash()})"

sourceCompatibility = JavaLanguageVersion.of(21)
targetCompatibility = JavaLanguageVersion.of(21)

repositories {
    mavenCentral()
    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'}
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
}

ext {
    versions = [
        paper: '1.21',
        incendoCloudSpigot: '1.8.4',
        adventureTextMinimessage: '4.17.0',
        fastboard: '2.1.2'
    ]
}

dependencies {
    /** Import PaperMC */
    compileOnly("io.papermc.paper:paper-api:${versions.paper}-R0.1-SNAPSHOT")
    /**Import incendo/cloud*/
    implementation "cloud.commandframework:cloud-core:${versions.incendoCloudSpigot}"
    implementation "cloud.commandframework:cloud-annotations:${versions.incendoCloudSpigot}"
    implementation "cloud.commandframework:cloud-minecraft-extras:${versions.incendoCloudSpigot}"
    annotationProcessor "cloud.commandframework:cloud-annotations:${versions.incendoCloudSpigot}"
    implementation "cloud.commandframework:cloud-brigadier:${versions.incendoCloudSpigot}"
    implementation "cloud.commandframework:cloud-bukkit:${versions.incendoCloudSpigot}"
    /** Import Minimessage */
    implementation "net.kyori:adventure-text-minimessage:${versions.adventureTextMinimessage}"
    implementation "fr.mrmicky:fastboard:${versions.fastboard}"
    /** reflections */    
    implementation 'org.reflections:reflections:0.10.2'
    // inv
    implementation 'fr.mrmicky:FastInv:3.0.4'

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.19:2.144.3'
    testImplementation 'org.assertj:assertj-core:3.24.1'
    testImplementation 'com.google.code.gson:gson:2.10.1'
}

processResources {
    def properties = [version: version, name: project.plugin_name,
                      group  : project.group, website: project.website,
                      author : project.author]
    inputs.properties properties
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand properties
    }
}

def branch() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def date() {
    def date = new Date()
    def formattedDate = date.format('yyyy.M.d')
    return formattedDate
}

def hash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    stdout.toString().trim()
}

build.dependsOn shadowJar
